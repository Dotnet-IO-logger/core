@page
@model Diol.Aspnet.Pages.IndexModel
@{
}

<html>
<head>
    <title>Diol signal r client</title>
    <style>
        /* Reset default browser styles */
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        /* Set a base font and background color for the body */
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background-color: #e7e7e7;
            line-height: 1.6;
            padding: 20px;
        }

        /* Style the main heading */
        h1 {
            text-align: center;
            color: #333;
            margin-bottom: 40px;
        }

        /* Style sections with a card-like appearance */
        section {
            background: #fff;
            padding: 20px;
            margin-bottom: 20px;
            border-radius: 10px;
            box-shadow: 0 5px 15px rgba(0,0,0,0.1);
        }

        /* Style buttons with a modern look */
        button {
            display: block;
            width: 100%;
            padding: 10px;
            margin: 20px 0;
            background: #5cb85c;
            color: #fff;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            font-size: 16px;
        }

        button:hover {
            background: #4cae4c;
        }

        /* Style the input field */
        input[type="text"] {
            width: calc(100% - 22px);
            padding: 10px;
            margin-top: 20px;
            margin-bottom: 10px;
            border-radius: 5px;
            border: 1px solid #ddd;
            font-size: 16px;
        }

        /* Style the table */
        table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 20px;
        }

        th, td {
            text-align: left;
            padding: 12px;
            border-bottom: 1px solid #ddd;
        }

        th {
            background-color: #f4f4f4;
            color: #333;
        }

        /* Add a hover effect for table rows */
        tbody tr:hover {
            background-color: #f9f9f9;
        }
    </style>
</head>
<body>
    
    <h1>Welcome to Diol signal r client</h1>

    <section>

        <p>Before starting we need to connect to signal R hub.</p>

        <button id="btn_connect_to_signalr"
            onclick="connectToSignalR()">Connect to signal r</button>
        <span id="status_span"></span>

    </section>

    <section>

        <p>Then, we need to connect to the process by id. You can find an id by specific endpoint.</p>

        <input id="processId" type="text" />
        <button id="btn_connect_to_process"
            onclick="connectToProcess()">Connect to the process</button>
    </section>

    <section>
        <p>Now new data should come. you can always clear the table</p>

        <button id="btn_clear"
                onclick="refreshTable()">
            Clear
        </button>

        <hr />

        <div>
            <table>
                <thead>
                    <tr>
                        <th>Category</th>
                        <th>Event</th>
                        <th>Correlation</th>
                        <th>Process id</th>
                    </tr>
                </thead>
                <tbody id="table-body">
                </tbody>
            </table>
        </div>
    </section>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/6.0.1/signalr.js"></script>
    <script type="text/javascript">
        
        // create connection
        const connection = new signalR.HubConnectionBuilder()
            .withUrl("/logsHub")
            .configureLogging(signalR.LogLevel.Information)
            .build();
        
        // utils
        function setStatusMessage(message) {
            document.getElementById("status_span").innerHTML = message;
        }

        function getProcessId() {
            return document.getElementById("processId").value
        }

        function getTable() {
            return document.getElementById("table-body");
        }

        function connectToSignalR() {
            console.log('connectToSignalR');
            connection.start();
        }

        function connectToProcess() {
            var processId = parseInt(getProcessId());
            console.log('connectToProcess', processId);
            connection.invoke('Subscribe', processId);
        }

        function refreshTable() {
            getTable().replaceChildren();
        }

        function addRow(category, event, correlationId, processId) {
            let row = document.createElement('tr');
            
            let c1 = document.createElement('td');
            c1.innerHTML = category;

            [category, event, correlationId, processId].forEach(function (item) {
                let c = document.createElement('td');
                c.innerHTML = item;
                row.appendChild(c);
            });

            getTable().appendChild(row)
        }

        // setup
        connection.onclose(function() {
            setStatusMessage("connection failed");
        });

        function logsReceivedHanndler(categoryName, eventName, dataAsJson) {
            let data = JSON.parse(dataAsJson);
            let category = data.CategoryName;
            let event = data.EventName;
            let correlationId = data.CorrelationId;
            let processId = data.ProcessId;
            addRow(category, event, correlationId, processId);
        }

        connection.on('LogReceived', logsReceivedHanndler);

        connection.on('DiolLogsHubConnected', function(date) {
            alert('DiolLogsHubConnected');
        });


    </script>
</body>
</html>